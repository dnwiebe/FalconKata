#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "binary_parser.h"

char record[10][80];
int recordCount = 0;
void recordString (const char* string) {
  if (recordCount >= 10) {return;}
  strncpy (record[recordCount++], string, 80);
}

int mockOperation (const char* leftOperand, const char* operator, const char* rightOperand, char* result, int len) {
  recordString (leftOperand);
  recordString (operator);
  recordString (rightOperand);
  strncpy (result, operator, len);
  return 0;
}

int percentOperation (const char* leftOperand, const char* rightOperand, char* result, int len) {
  return mockOperation (leftOperand, "percent", rightOperand, result, len);
}

int ampersandOperation (const char* leftOperand, const char* rightOperand, char* result, int len) {
  return mockOperation (leftOperand, "ampersand", rightOperand, result, len);
}

int failingOperation (const char* leftOperand, const char* rightOperand, char* result, int len) {
  mockOperation (leftOperand, "exclamation", rightOperand, result, len);
  return 47;
}

const BinaryOperation operations[] = {
  {"%", &percentOperation},
  {"&", &ampersandOperation}
};

int parseLine (char* line, char** leftOperand, char** operand, char** rightOperand);
const BinaryOperation* selectOperation (const BinaryOperation operations[], int count, const char* operator);

#test parsesGoodInput1
  char result[80];
  
  int status = performBinaryOperations (operations, 2, " Stanley  & Emily ", result, sizeof (result));
  
  ck_assert_int_eq (status, 0);
  ck_assert_str_eq (result, "ampersand");
  ck_assert_str_eq (record[0], "Stanley");
  ck_assert_str_eq (record[1], "ampersand");
  ck_assert_str_eq (record[2], "Emily");

#test parsesGoodInput2
  char result[80];
  
  int status = performBinaryOperations (operations, 2, " Morgan %\tKim", result, sizeof (result));
  
  ck_assert_int_eq (status, 0);
  ck_assert_str_eq (result, "percent");
  ck_assert_str_eq (record[0], "Morgan");
  ck_assert_str_eq (record[1], "percent");
  ck_assert_str_eq (record[2], "Kim");
  
#test handlesEmptyInput
  char result[80];
  
  strncpy (result, "booga", sizeof (result));
  
  int status = performBinaryOperations (operations, 2, "", result, sizeof (result));
  
  ck_assert_int_eq (status, 0);
  ck_assert_str_eq (result, "");

#test truncatesOutputAndComplainsIfProvidedSpaceTooSmall
  char result[6];
  
  int status = performBinaryOperations (operations, 2, "Stanley & Emily", result, 6);
  
  ck_assert_int_eq (status, PBO_OUTPUT_TRUNCATED);
  ck_assert_str_eq (result, "amper");
  ck_assert_str_eq (record[0], "Stanley");
  ck_assert_str_eq (record[1], "ampersand");
  ck_assert_str_eq (record[2], "Emily");
  
#test copiesInvalidInputToOutputWithoutModification
  char result[80];
  
  int status = performBinaryOperations (operations, 2, "Booga booga!", result, sizeof (result));
  
  ck_assert_int_eq (status, PBO_INVALID_INPUT);
  ck_assert_str_eq (result, "Booga booga!");

#test copiesInputWithUnknownOperatorToOutputWithoutModification
  char result[80];
  
  int status = performBinaryOperations (operations, 2, "Tom * Becky", result, sizeof (result));
  
  ck_assert_int_eq (status, PBO_UNKNOWN_OPERATOR);
  ck_assert_str_eq (result, "Tom * Becky");

#test copiesInputToOutputWithoutModificationWhenOperatorFails
  char result[80];
  const BinaryOperation operations[] = {
    {"!", &failingOperation}
  };
  
  int status = performBinaryOperations (operations, 1, "up ! set", result, sizeof (result));
  
  ck_assert_int_eq (status, 47);
  ck_assert_str_eq (result, "up ! set");
  
#test parseLineHandlesGoodInput
  char line[80];
  char* initialValue = "";
  char* leftOperand = initialValue;
  char* operator = initialValue;
  char* rightOperand = initialValue;
  
  strncpy (line, "first second\tthird", sizeof (line));
  
  int result = parseLine (line, &leftOperand, &operator, &rightOperand);
  
  ck_assert_str_eq (leftOperand, "first");
  ck_assert_str_eq (operator, "second");
  ck_assert_str_eq (rightOperand, "third");
  ck_assert_int_eq (result, 0);

#test parseLineReturnsErrorAndDoesntTouchPointersIfLineDoesntMatch
  char line[80];
  char* initialValue = "";
  char* leftOperand = initialValue;
  char* operator = initialValue;
  char* rightOperand = initialValue;
  
  strncpy (line, "Doesn't match", sizeof (line));
  
  int result = parseLine (line, &leftOperand, &operator, &rightOperand);
  
  ck_assert (result != 0);
  ck_assert_str_eq (line, "Doesn't match");
  ck_assert_int_eq (leftOperand, initialValue);
  ck_assert_int_eq (operator, initialValue);
  ck_assert_int_eq (rightOperand, initialValue);
  
#test selectOperationReturnsNULLIfIndicatedOperationNotFound

  const BinaryOperation* result = selectOperation (operations, 2, "booga");
  
  ck_assert_int_eq (result, NULL);
  
 