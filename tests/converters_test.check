#include <stdio.h>
#include "converters.h"

typedef struct {
  const char* roman;
  int arabic;
} Conversion;

Conversion expectedConversions[] = {
  {"I", 1},
  {"II", 2},
  {"III", 3},
  {"IV", 4},
  {"V", 5},
  {"VI", 6},
  {"VIII", 8},
  {"IX", 9},
  {"X", 10},
  {"XI", 11},
  {"XIV", 14},
  {"XV", 15},
  {"XIX", 19},
  {"XX", 20},
  {"XXVI", 26},
  {"XL", 40},
  {"L", 50},
  {"LXXXIX", 89},
  {"XC", 90},
  {"C", 100},
  {"CD", 400},
  {"D", 500},
  {"CM", 900},
  {"M", 1000},
  {"MMI", 2001},
  {"MMXVI", 2016},
  {"MMMDCCCLXXXVIII", 3888},
  {"MMMCMXCIX", 3999}
};

#test convertRtoAHandlesGoodInput
  int count = sizeof (expectedConversions) / sizeof (Conversion);
  int i;
  Conversion* conversion;
  int status;
  int arabic;
  
  for (i = 0; i < count; i++) {
    conversion = &expectedConversions[i];
    
    status = convertRtoA (conversion->roman, &arabic);
    
    ck_assert_int_eq (status, 0);
    ck_assert_int_eq (arabic, conversion->arabic);
  }

#test convertRtoAHandlesBadString
  int status;
  
  status = convertRtoA ("Booga booga", NULL);

  ck_assert_int_eq (status, RC_INVALID_ROMAN_NUMERAL);

#test convertRtoAHandlesBadValue
  int status;
  
  status = convertRtoA ("MMMM", NULL);

  ck_assert_int_eq (status, RC_NUMBER_OUT_OF_RANGE);

#test convertAtoRHandlesGoodInput
  int count = sizeof (expectedConversions) / sizeof (Conversion);
  int i;
  Conversion* conversion;
  int status;
  char roman[80];
  
  for (i = 0; i < count; i++) {
    conversion = &expectedConversions[i];
    
    status = convertAtoR (conversion->arabic, roman, sizeof (roman));
    
    ck_assert_int_eq (status, 0);
    ck_assert_str_eq (roman, conversion->roman);
  }

#test convertAtoRHandlesOutOfRangeLow
  int status;
  
  status = convertAtoR (0, NULL, 0);

  ck_assert_int_eq (status, RC_NUMBER_OUT_OF_RANGE);

#test convertAtoRHandlesOutOfRangeHigh
  int status;
  
  status = convertAtoR (4000, NULL, 0);

  ck_assert_int_eq (status, RC_NUMBER_OUT_OF_RANGE);

#test convertAtoRHandlesOutputOverrun
  int status;
  char roman[3];
  
  strcpy (roman, "..");
  
  status = convertAtoR (3, NULL, 3);

  ck_assert_int_eq (status, RC_OUTPUT_OVERRUN);
  ck_assert_str_eq (roman, "..");
